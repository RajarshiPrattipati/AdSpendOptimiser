// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  googleId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts  AdAccount[]
  sessions  Session[]
  auditLogs AuditLog[]

  @@map("users")
}

model Session {
  id                    String    @id @default(cuid())
  userId                String
  accessToken           String    @db.Text
  refreshToken          String?   @db.Text
  expiresAt             DateTime // Access token expiration
  refreshTokenExpiresAt DateTime? // Refresh token expiration (typically 60 days from issue)
  lastActivityAt        DateTime  @default(now()) // For session timeout tracking
  ipAddress             String? // IP address of the session
  userAgent             String?   @db.Text // Browser/device user agent
  deviceFingerprint     String? // Device fingerprint for suspicious activity detection
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, lastActivityAt])
  @@index([expiresAt])
  @@index([refreshTokenExpiresAt])
  @@index([ipAddress])
  @@map("sessions")
}

enum AuditEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  TOKEN_REFRESH_SUCCESS
  TOKEN_REFRESH_FAILED
  SESSION_TIMEOUT
  SESSION_EXPIRED
  PASSWORD_CHANGE
  ACCOUNT_LOCKED
  SUSPICIOUS_ACTIVITY
  RATE_LIMIT_EXCEEDED
  UNAUTHORIZED_ACCESS
}

model AuditLog {
  id          String         @id @default(cuid())
  userId      String? // Nullable for failed login attempts
  eventType   AuditEventType
  ipAddress   String?
  userAgent   String?        @db.Text
  deviceInfo  String?        @db.Text
  metadata    Json? // Additional event-specific data
  severity    String         @default("info") // info, warning, error, critical
  message     String         @db.Text
  timestamp   DateTime       @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@index([severity, timestamp])
  @@index([ipAddress, timestamp])
  @@map("audit_logs")
}

model AdAccount {
  id               String    @id @default(cuid())
  userId           String
  customerId       String // Google Ads customer ID
  accountName      String
  currency         String    @default("USD")
  timezone         String?
  isActive         Boolean   @default(true)
  isManagerAccount Boolean   @default(false) // True for MCC/manager accounts
  managerAccountId String? // ID of the parent manager account if this is a client account
  lastSyncedAt     DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns       Campaign[]
  recommendations Recommendation[]

  @@unique([userId, customerId])
  @@index([managerAccountId])
  @@map("ad_accounts")
}

model Campaign {
  id              String   @id @default(cuid())
  adAccountId     String
  campaignId      String // Google Ads campaign ID
  campaignName    String
  status          String // ENABLED, PAUSED, REMOVED
  biddingStrategy String?
  budget          Float?
  targetCpa       Float?
  targetRoas      Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  adAccount       AdAccount         @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  metrics         CampaignMetrics[]
  recommendations Recommendation[]
  keywords        Keyword[]
  searchTerms     SearchTerm[]

  @@unique([adAccountId, campaignId])
  @@map("campaigns")
}

model CampaignMetrics {
  id                String   @id @default(cuid())
  campaignId        String
  date              DateTime @db.Date
  impressions       Int      @default(0)
  clicks            Int      @default(0)
  cost              Float    @default(0)
  conversions       Float    @default(0)
  conversionValue   Float    @default(0)
  ctr               Float    @default(0) // Click-through rate
  averageCpc        Float    @default(0) // Average cost per click
  costPerConversion Float    @default(0) // CPA
  roas              Float    @default(0) // Return on ad spend
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date])
  @@index([campaignId, date])
  @@map("campaign_metrics")
}

enum RecommendationType {
  BUDGET_REALLOCATION
  KEYWORD_OPTIMIZATION
  BID_ADJUSTMENT
  AD_CREATIVE
  PAUSE_CAMPAIGN
  PAUSE_KEYWORD
  ADD_NEGATIVE_KEYWORD
  BIDDING_STRATEGY_CHANGE
}

enum RecommendationStatus {
  PENDING
  APPROVED
  REJECTED
  IMPLEMENTED
  DISMISSED
}

model Recommendation {
  id          String  @id @default(cuid())
  adAccountId String
  campaignId  String? // Optional - some recommendations are account-level
  keywordId   String? // Optional - for keyword-specific recommendations
  adId        String? // Optional - for ad-specific recommendations

  type   RecommendationType
  status RecommendationStatus @default(PENDING)

  title       String // Short title for the recommendation
  description String @db.Text // Detailed explanation
  reasoning   String @db.Text // Why this recommendation is made

  // Impact estimation
  expectedImpact  String? // e.g., "15% CPA reduction"
  impactMetric    String? // e.g., "CPA", "ROAS", "CTR"
  impactValue     Float? // Numeric value of expected impact
  confidenceScore Float   @default(0) // 0-1 confidence in recommendation

  // Suggested changes (stored as JSON)
  suggestedChanges Json // Flexible field for storing change details

  // Implementation tracking
  implementedAt DateTime?
  implementedBy String?
  rollbackData  Json? // Data needed to rollback if needed

  // Priority and scheduling
  priority   String    @default("medium") // low, medium, high, critical
  validUntil DateTime? // Recommendations can expire

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  adAccount AdAccount @relation(fields: [adAccountId], references: [id], onDelete: Cascade)
  campaign  Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([adAccountId, status])
  @@index([campaignId])
  @@index([type, status])
  @@index([priority, createdAt])
  @@map("recommendations")
}

// Add these models to schema.prisma after the Recommendation model

enum KeywordMatchType {
  EXACT
  PHRASE
  BROAD
  BROAD_MATCH_MODIFIER
}

model Keyword {
  id          String           @id @default(cuid())
  campaignId  String
  keywordId   String // Google Ads keyword ID
  keywordText String
  matchType   KeywordMatchType
  status      String // ENABLED, PAUSED, REMOVED

  // Performance metrics (latest/aggregated)
  impressions Int   @default(0)
  clicks      Int   @default(0)
  cost        Float @default(0)
  conversions Float @default(0)
  ctr         Float @default(0)
  cpc         Float @default(0)
  cpa         Float @default(0)

  // Quality Score
  qualityScore Int? // 1-10

  lastSyncedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, keywordId])
  @@index([campaignId, status])
  @@index([cpa])
  @@index([conversions])
  @@map("keywords")
}

model SearchTerm {
  id             String  @id @default(cuid())
  campaignId     String
  searchTerm     String // The actual search query
  matchedKeyword String? // Which keyword matched
  matchType      String? // How it matched

  // Performance metrics
  impressions    Int   @default(0)
  clicks         Int   @default(0)
  cost           Float @default(0)
  conversions    Float @default(0)
  ctr            Float @default(0)
  cpc            Float @default(0)
  cpa            Float @default(0)
  conversionRate Float @default(0)

  // Analysis flags
  isNegative       Boolean @default(false) // Flagged as negative keyword candidate
  priority         String? // high, medium, low for negative keyword priority
  estimatedSavings Float? // Estimated cost savings if negated

  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, searchTerm, date])
  @@index([campaignId, date])
  @@index([isNegative, priority])
  @@index([conversions])
  @@map("search_terms")
}
